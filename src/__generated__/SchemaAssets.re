/** This file is autogenerated by ReasonRelay and should not be modified manually. */
/**
 * ENUMS
 * Helpers for wrapping/unwrapping enums.
 */
module Enum_EnterpriseMemberOrderField: {
  type t = [ | `LOGIN | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `LOGIN | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "LOGIN" => `LOGIN
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `LOGIN => "LOGIN"
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrderDirection: {
  type t = [ | `ASC | `DESC | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `ASC | `DESC | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ASC" => `ASC
    | "DESC" => `DESC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ASC => "ASC"
      | `DESC => "DESC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseUserAccountMembershipRole: {
  type t = [ | `MEMBER | `OWNER | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `MEMBER | `OWNER | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "MEMBER" => `MEMBER
    | "OWNER" => `OWNER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `MEMBER => "MEMBER"
      | `OWNER => "OWNER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseUserDeployment: {
  type t = [ | `CLOUD | `SERVER | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CLOUD | `SERVER | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CLOUD" => `CLOUD
    | "SERVER" => `SERVER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CLOUD => "CLOUD"
      | `SERVER => "SERVER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrganizationOrderField: {
  type t = [ | `CREATED_AT | `LOGIN | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `LOGIN | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "LOGIN" => `LOGIN
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `LOGIN => "LOGIN"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RegistryPackageType: {
  type t = [
    | `NPM
    | `RUBYGEMS
    | `MAVEN
    | `DOCKER
    | `DEBIAN
    | `NUGET
    | `PYTHON
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `NPM
    | `RUBYGEMS
    | `MAVEN
    | `DOCKER
    | `DEBIAN
    | `NUGET
    | `PYTHON
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NPM" => `NPM
    | "RUBYGEMS" => `RUBYGEMS
    | "MAVEN" => `MAVEN
    | "DOCKER" => `DOCKER
    | "DEBIAN" => `DEBIAN
    | "NUGET" => `NUGET
    | "PYTHON" => `PYTHON
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NPM => "NPM"
      | `RUBYGEMS => "RUBYGEMS"
      | `MAVEN => "MAVEN"
      | `DOCKER => "DOCKER"
      | `DEBIAN => "DEBIAN"
      | `NUGET => "NUGET"
      | `PYTHON => "PYTHON"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RegistryPackageDependencyType: {
  type t = [
    | `DEFAULT
    | `DEV
    | `TEST
    | `PEER
    | `OPTIONAL
    | `BUNDLED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `DEFAULT
    | `DEV
    | `TEST
    | `PEER
    | `OPTIONAL
    | `BUNDLED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "DEFAULT" => `DEFAULT
    | "DEV" => `DEV
    | "TEST" => `TEST
    | "PEER" => `PEER
    | "OPTIONAL" => `OPTIONAL
    | "BUNDLED" => `BUNDLED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `DEFAULT => "DEFAULT"
      | `DEV => "DEV"
      | `TEST => "TEST"
      | `PEER => "PEER"
      | `OPTIONAL => "OPTIONAL"
      | `BUNDLED => "BUNDLED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ProjectCardArchivedState: {
  type t = [ | `ARCHIVED | `NOT_ARCHIVED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `ARCHIVED | `NOT_ARCHIVED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ARCHIVED" => `ARCHIVED
    | "NOT_ARCHIVED" => `NOT_ARCHIVED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ARCHIVED => "ARCHIVED"
      | `NOT_ARCHIVED => "NOT_ARCHIVED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_CommentAuthorAssociation: {
  type t = [
    | `MEMBER
    | `OWNER
    | `COLLABORATOR
    | `CONTRIBUTOR
    | `FIRST_TIME_CONTRIBUTOR
    | `FIRST_TIMER
    | `NONE
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `MEMBER
    | `OWNER
    | `COLLABORATOR
    | `CONTRIBUTOR
    | `FIRST_TIME_CONTRIBUTOR
    | `FIRST_TIMER
    | `NONE
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "MEMBER" => `MEMBER
    | "OWNER" => `OWNER
    | "COLLABORATOR" => `COLLABORATOR
    | "CONTRIBUTOR" => `CONTRIBUTOR
    | "FIRST_TIME_CONTRIBUTOR" => `FIRST_TIME_CONTRIBUTOR
    | "FIRST_TIMER" => `FIRST_TIMER
    | "NONE" => `NONE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `MEMBER => "MEMBER"
      | `OWNER => "OWNER"
      | `COLLABORATOR => "COLLABORATOR"
      | `CONTRIBUTOR => "CONTRIBUTOR"
      | `FIRST_TIME_CONTRIBUTOR => "FIRST_TIME_CONTRIBUTOR"
      | `FIRST_TIMER => "FIRST_TIMER"
      | `NONE => "NONE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_CommentCannotUpdateReason: {
  type t = [
    | `ARCHIVED
    | `INSUFFICIENT_ACCESS
    | `LOCKED
    | `LOGIN_REQUIRED
    | `MAINTENANCE
    | `VERIFIED_EMAIL_REQUIRED
    | `DENIED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `ARCHIVED
    | `INSUFFICIENT_ACCESS
    | `LOCKED
    | `LOGIN_REQUIRED
    | `MAINTENANCE
    | `VERIFIED_EMAIL_REQUIRED
    | `DENIED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ARCHIVED" => `ARCHIVED
    | "INSUFFICIENT_ACCESS" => `INSUFFICIENT_ACCESS
    | "LOCKED" => `LOCKED
    | "LOGIN_REQUIRED" => `LOGIN_REQUIRED
    | "MAINTENANCE" => `MAINTENANCE
    | "VERIFIED_EMAIL_REQUIRED" => `VERIFIED_EMAIL_REQUIRED
    | "DENIED" => `DENIED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ARCHIVED => "ARCHIVED"
      | `INSUFFICIENT_ACCESS => "INSUFFICIENT_ACCESS"
      | `LOCKED => "LOCKED"
      | `LOGIN_REQUIRED => "LOGIN_REQUIRED"
      | `MAINTENANCE => "MAINTENANCE"
      | `VERIFIED_EMAIL_REQUIRED => "VERIFIED_EMAIL_REQUIRED"
      | `DENIED => "DENIED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_LabelOrderField: {
  type t = [ | `NAME | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `NAME | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NAME" => `NAME
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NAME => "NAME"
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_IssueOrderField: {
  type t = [ | `CREATED_AT | `UPDATED_AT | `COMMENTS | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `UPDATED_AT | `COMMENTS | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "UPDATED_AT" => `UPDATED_AT
    | "COMMENTS" => `COMMENTS
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `UPDATED_AT => "UPDATED_AT"
      | `COMMENTS => "COMMENTS"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_IssueState: {
  type t = [ | `OPEN | `CLOSED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `OPEN | `CLOSED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OPEN" => `OPEN
    | "CLOSED" => `CLOSED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OPEN => "OPEN"
      | `CLOSED => "CLOSED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PullRequestState: {
  type t = [ | `OPEN | `CLOSED | `MERGED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `OPEN | `CLOSED | `MERGED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OPEN" => `OPEN
    | "CLOSED" => `CLOSED
    | "MERGED" => `MERGED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OPEN => "OPEN"
      | `CLOSED => "CLOSED"
      | `MERGED => "MERGED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_LockReason: {
  type t = [
    | `OFF_TOPIC
    | `TOO_HEATED
    | `RESOLVED
    | `SPAM
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `OFF_TOPIC
    | `TOO_HEATED
    | `RESOLVED
    | `SPAM
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OFF_TOPIC" => `OFF_TOPIC
    | "TOO_HEATED" => `TOO_HEATED
    | "RESOLVED" => `RESOLVED
    | "SPAM" => `SPAM
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OFF_TOPIC => "OFF_TOPIC"
      | `TOO_HEATED => "TOO_HEATED"
      | `RESOLVED => "RESOLVED"
      | `SPAM => "SPAM"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ReactionContent: {
  type t = [
    | `THUMBS_UP
    | `THUMBS_DOWN
    | `LAUGH
    | `HOORAY
    | `CONFUSED
    | `HEART
    | `ROCKET
    | `EYES
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `THUMBS_UP
    | `THUMBS_DOWN
    | `LAUGH
    | `HOORAY
    | `CONFUSED
    | `HEART
    | `ROCKET
    | `EYES
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "THUMBS_UP" => `THUMBS_UP
    | "THUMBS_DOWN" => `THUMBS_DOWN
    | "LAUGH" => `LAUGH
    | "HOORAY" => `HOORAY
    | "CONFUSED" => `CONFUSED
    | "HEART" => `HEART
    | "ROCKET" => `ROCKET
    | "EYES" => `EYES
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `THUMBS_UP => "THUMBS_UP"
      | `THUMBS_DOWN => "THUMBS_DOWN"
      | `LAUGH => "LAUGH"
      | `HOORAY => "HOORAY"
      | `CONFUSED => "CONFUSED"
      | `HEART => "HEART"
      | `ROCKET => "ROCKET"
      | `EYES => "EYES"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ReactionOrderField: {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SubscriptionState: {
  type t = [ | `UNSUBSCRIBED | `SUBSCRIBED | `IGNORED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `UNSUBSCRIBED | `SUBSCRIBED | `IGNORED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "UNSUBSCRIBED" => `UNSUBSCRIBED
    | "SUBSCRIBED" => `SUBSCRIBED
    | "IGNORED" => `IGNORED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `UNSUBSCRIBED => "UNSUBSCRIBED"
      | `SUBSCRIBED => "SUBSCRIBED"
      | `IGNORED => "IGNORED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_StarOrderField: {
  type t = [ | `STARRED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `STARRED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "STARRED_AT" => `STARRED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `STARRED_AT => "STARRED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepositoryLockReason: {
  type t = [
    | `MOVING
    | `BILLING
    | `RENAME
    | `MIGRATING
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `MOVING
    | `BILLING
    | `RENAME
    | `MIGRATING
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "MOVING" => `MOVING
    | "BILLING" => `BILLING
    | "RENAME" => `RENAME
    | "MIGRATING" => `MIGRATING
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `MOVING => "MOVING"
      | `BILLING => "BILLING"
      | `RENAME => "RENAME"
      | `MIGRATING => "MIGRATING"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepositoryPrivacy: {
  type t = [ | `PUBLIC | `PRIVATE | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `PUBLIC | `PRIVATE | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "PUBLIC" => `PUBLIC
    | "PRIVATE" => `PRIVATE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `PUBLIC => "PUBLIC"
      | `PRIVATE => "PRIVATE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepositoryOrderField: {
  type t = [
    | `CREATED_AT
    | `UPDATED_AT
    | `PUSHED_AT
    | `NAME
    | `STARGAZERS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `CREATED_AT
    | `UPDATED_AT
    | `PUSHED_AT
    | `NAME
    | `STARGAZERS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "UPDATED_AT" => `UPDATED_AT
    | "PUSHED_AT" => `PUSHED_AT
    | "NAME" => `NAME
    | "STARGAZERS" => `STARGAZERS
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `UPDATED_AT => "UPDATED_AT"
      | `PUSHED_AT => "PUSHED_AT"
      | `NAME => "NAME"
      | `STARGAZERS => "STARGAZERS"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepositoryAffiliation: {
  type t = [
    | `OWNER
    | `COLLABORATOR
    | `ORGANIZATION_MEMBER
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `OWNER
    | `COLLABORATOR
    | `ORGANIZATION_MEMBER
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OWNER" => `OWNER
    | "COLLABORATOR" => `COLLABORATOR
    | "ORGANIZATION_MEMBER" => `ORGANIZATION_MEMBER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OWNER => "OWNER"
      | `COLLABORATOR => "COLLABORATOR"
      | `ORGANIZATION_MEMBER => "ORGANIZATION_MEMBER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_UserStatusOrderField: {
  type t = [ | `UPDATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `UPDATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "UPDATED_AT" => `UPDATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `UPDATED_AT => "UPDATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TeamOrderField: {
  type t = [ | `NAME | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `NAME | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NAME" => `NAME
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NAME => "NAME"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TeamDiscussionCommentOrderField: {
  type t = [ | `NUMBER | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `NUMBER | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NUMBER" => `NUMBER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NUMBER => "NUMBER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TeamDiscussionOrderField: {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrganizationInvitationType: {
  type t = [ | `USER | `EMAIL | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `USER | `EMAIL | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "USER" => `USER
    | "EMAIL" => `EMAIL
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `USER => "USER"
      | `EMAIL => "EMAIL"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrganizationInvitationRole: {
  type t = [
    | `DIRECT_MEMBER
    | `ADMIN
    | `BILLING_MANAGER
    | `REINSTATE
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `DIRECT_MEMBER
    | `ADMIN
    | `BILLING_MANAGER
    | `REINSTATE
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "DIRECT_MEMBER" => `DIRECT_MEMBER
    | "ADMIN" => `ADMIN
    | "BILLING_MANAGER" => `BILLING_MANAGER
    | "REINSTATE" => `REINSTATE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `DIRECT_MEMBER => "DIRECT_MEMBER"
      | `ADMIN => "ADMIN"
      | `BILLING_MANAGER => "BILLING_MANAGER"
      | `REINSTATE => "REINSTATE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TeamMembershipType: {
  type t = [ | `IMMEDIATE | `CHILD_TEAM | `ALL | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `IMMEDIATE | `CHILD_TEAM | `ALL | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "IMMEDIATE" => `IMMEDIATE
    | "CHILD_TEAM" => `CHILD_TEAM
    | "ALL" => `ALL
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `IMMEDIATE => "IMMEDIATE"
      | `CHILD_TEAM => "CHILD_TEAM"
      | `ALL => "ALL"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TeamMemberRole: {
  type t = [ | `MAINTAINER | `MEMBER | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `MAINTAINER | `MEMBER | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "MAINTAINER" => `MAINTAINER
    | "MEMBER" => `MEMBER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `MAINTAINER => "MAINTAINER"
      | `MEMBER => "MEMBER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TeamMemberOrderField: {
  type t = [ | `LOGIN | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `LOGIN | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "LOGIN" => `LOGIN
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `LOGIN => "LOGIN"
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TeamPrivacy: {
  type t = [ | `SECRET | `VISIBLE | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `SECRET | `VISIBLE | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "SECRET" => `SECRET
    | "VISIBLE" => `VISIBLE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `SECRET => "SECRET"
      | `VISIBLE => "VISIBLE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TeamRepositoryOrderField: {
  type t = [
    | `CREATED_AT
    | `UPDATED_AT
    | `PUSHED_AT
    | `NAME
    | `PERMISSION
    | `STARGAZERS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `CREATED_AT
    | `UPDATED_AT
    | `PUSHED_AT
    | `NAME
    | `PERMISSION
    | `STARGAZERS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "UPDATED_AT" => `UPDATED_AT
    | "PUSHED_AT" => `PUSHED_AT
    | "NAME" => `NAME
    | "PERMISSION" => `PERMISSION
    | "STARGAZERS" => `STARGAZERS
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `UPDATED_AT => "UPDATED_AT"
      | `PUSHED_AT => "PUSHED_AT"
      | `NAME => "NAME"
      | `PERMISSION => "PERMISSION"
      | `STARGAZERS => "STARGAZERS"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepositoryPermission: {
  type t = [
    | `ADMIN
    | `MAINTAIN
    | `WRITE
    | `TRIAGE
    | `READ
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `ADMIN
    | `MAINTAIN
    | `WRITE
    | `TRIAGE
    | `READ
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ADMIN" => `ADMIN
    | "MAINTAIN" => `MAINTAIN
    | "WRITE" => `WRITE
    | "TRIAGE" => `TRIAGE
    | "READ" => `READ
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ADMIN => "ADMIN"
      | `MAINTAIN => "MAINTAIN"
      | `WRITE => "WRITE"
      | `TRIAGE => "TRIAGE"
      | `READ => "READ"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_CollaboratorAffiliation: {
  type t = [ | `OUTSIDE | `DIRECT | `ALL | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `OUTSIDE | `DIRECT | `ALL | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OUTSIDE" => `OUTSIDE
    | "DIRECT" => `DIRECT
    | "ALL" => `ALL
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OUTSIDE => "OUTSIDE"
      | `DIRECT => "DIRECT"
      | `ALL => "ALL"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_DefaultRepositoryPermissionField: {
  type t = [ | `NONE | `READ | `WRITE | `ADMIN | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `NONE | `READ | `WRITE | `ADMIN | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NONE" => `NONE
    | "READ" => `READ
    | "WRITE" => `WRITE
    | "ADMIN" => `ADMIN
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NONE => "NONE"
      | `READ => "READ"
      | `WRITE => "WRITE"
      | `ADMIN => "ADMIN"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PullRequestOrderField: {
  type t = [ | `CREATED_AT | `UPDATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `UPDATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "UPDATED_AT" => `UPDATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `UPDATED_AT => "UPDATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_DeploymentOrderField: {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_DeploymentStatusState: {
  type t = [
    | `PENDING
    | `SUCCESS
    | `FAILURE
    | `INACTIVE
    | `ERROR
    | `QUEUED
    | `IN_PROGRESS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `PENDING
    | `SUCCESS
    | `FAILURE
    | `INACTIVE
    | `ERROR
    | `QUEUED
    | `IN_PROGRESS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "PENDING" => `PENDING
    | "SUCCESS" => `SUCCESS
    | "FAILURE" => `FAILURE
    | "INACTIVE" => `INACTIVE
    | "ERROR" => `ERROR
    | "QUEUED" => `QUEUED
    | "IN_PROGRESS" => `IN_PROGRESS
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `PENDING => "PENDING"
      | `SUCCESS => "SUCCESS"
      | `FAILURE => "FAILURE"
      | `INACTIVE => "INACTIVE"
      | `ERROR => "ERROR"
      | `QUEUED => "QUEUED"
      | `IN_PROGRESS => "IN_PROGRESS"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_DeploymentState: {
  type t = [
    | `ABANDONED
    | `ACTIVE
    | `DESTROYED
    | `ERROR
    | `FAILURE
    | `INACTIVE
    | `PENDING
    | `QUEUED
    | `IN_PROGRESS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `ABANDONED
    | `ACTIVE
    | `DESTROYED
    | `ERROR
    | `FAILURE
    | `INACTIVE
    | `PENDING
    | `QUEUED
    | `IN_PROGRESS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ABANDONED" => `ABANDONED
    | "ACTIVE" => `ACTIVE
    | "DESTROYED" => `DESTROYED
    | "ERROR" => `ERROR
    | "FAILURE" => `FAILURE
    | "INACTIVE" => `INACTIVE
    | "PENDING" => `PENDING
    | "QUEUED" => `QUEUED
    | "IN_PROGRESS" => `IN_PROGRESS
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ABANDONED => "ABANDONED"
      | `ACTIVE => "ACTIVE"
      | `DESTROYED => "DESTROYED"
      | `ERROR => "ERROR"
      | `FAILURE => "FAILURE"
      | `INACTIVE => "INACTIVE"
      | `PENDING => "PENDING"
      | `QUEUED => "QUEUED"
      | `IN_PROGRESS => "IN_PROGRESS"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_GitSignatureState: {
  type t = [
    | `VALID
    | `INVALID
    | `MALFORMED_SIG
    | `UNKNOWN_KEY
    | `BAD_EMAIL
    | `UNVERIFIED_EMAIL
    | `NO_USER
    | `UNKNOWN_SIG_TYPE
    | `UNSIGNED
    | `GPGVERIFY_UNAVAILABLE
    | `GPGVERIFY_ERROR
    | `NOT_SIGNING_KEY
    | `EXPIRED_KEY
    | `OCSP_PENDING
    | `OCSP_ERROR
    | `BAD_CERT
    | `OCSP_REVOKED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `VALID
    | `INVALID
    | `MALFORMED_SIG
    | `UNKNOWN_KEY
    | `BAD_EMAIL
    | `UNVERIFIED_EMAIL
    | `NO_USER
    | `UNKNOWN_SIG_TYPE
    | `UNSIGNED
    | `GPGVERIFY_UNAVAILABLE
    | `GPGVERIFY_ERROR
    | `NOT_SIGNING_KEY
    | `EXPIRED_KEY
    | `OCSP_PENDING
    | `OCSP_ERROR
    | `BAD_CERT
    | `OCSP_REVOKED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "VALID" => `VALID
    | "INVALID" => `INVALID
    | "MALFORMED_SIG" => `MALFORMED_SIG
    | "UNKNOWN_KEY" => `UNKNOWN_KEY
    | "BAD_EMAIL" => `BAD_EMAIL
    | "UNVERIFIED_EMAIL" => `UNVERIFIED_EMAIL
    | "NO_USER" => `NO_USER
    | "UNKNOWN_SIG_TYPE" => `UNKNOWN_SIG_TYPE
    | "UNSIGNED" => `UNSIGNED
    | "GPGVERIFY_UNAVAILABLE" => `GPGVERIFY_UNAVAILABLE
    | "GPGVERIFY_ERROR" => `GPGVERIFY_ERROR
    | "NOT_SIGNING_KEY" => `NOT_SIGNING_KEY
    | "EXPIRED_KEY" => `EXPIRED_KEY
    | "OCSP_PENDING" => `OCSP_PENDING
    | "OCSP_ERROR" => `OCSP_ERROR
    | "BAD_CERT" => `BAD_CERT
    | "OCSP_REVOKED" => `OCSP_REVOKED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `VALID => "VALID"
      | `INVALID => "INVALID"
      | `MALFORMED_SIG => "MALFORMED_SIG"
      | `UNKNOWN_KEY => "UNKNOWN_KEY"
      | `BAD_EMAIL => "BAD_EMAIL"
      | `UNVERIFIED_EMAIL => "UNVERIFIED_EMAIL"
      | `NO_USER => "NO_USER"
      | `UNKNOWN_SIG_TYPE => "UNKNOWN_SIG_TYPE"
      | `UNSIGNED => "UNSIGNED"
      | `GPGVERIFY_UNAVAILABLE => "GPGVERIFY_UNAVAILABLE"
      | `GPGVERIFY_ERROR => "GPGVERIFY_ERROR"
      | `NOT_SIGNING_KEY => "NOT_SIGNING_KEY"
      | `EXPIRED_KEY => "EXPIRED_KEY"
      | `OCSP_PENDING => "OCSP_PENDING"
      | `OCSP_ERROR => "OCSP_ERROR"
      | `BAD_CERT => "BAD_CERT"
      | `OCSP_REVOKED => "OCSP_REVOKED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_StatusState: {
  type t = [
    | `EXPECTED
    | `ERROR
    | `FAILURE
    | `PENDING
    | `SUCCESS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `EXPECTED
    | `ERROR
    | `FAILURE
    | `PENDING
    | `SUCCESS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "EXPECTED" => `EXPECTED
    | "ERROR" => `ERROR
    | "FAILURE" => `FAILURE
    | "PENDING" => `PENDING
    | "SUCCESS" => `SUCCESS
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `EXPECTED => "EXPECTED"
      | `ERROR => "ERROR"
      | `FAILURE => "FAILURE"
      | `PENDING => "PENDING"
      | `SUCCESS => "SUCCESS"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_FundingPlatform: {
  type t = [
    | `GITHUB
    | `PATREON
    | `OPEN_COLLECTIVE
    | `KO_FI
    | `TIDELIFT
    | `COMMUNITY_BRIDGE
    | `LIBERAPAY
    | `ISSUEHUNT
    | `OTECHIE
    | `CUSTOM
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `GITHUB
    | `PATREON
    | `OPEN_COLLECTIVE
    | `KO_FI
    | `TIDELIFT
    | `COMMUNITY_BRIDGE
    | `LIBERAPAY
    | `ISSUEHUNT
    | `OTECHIE
    | `CUSTOM
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "GITHUB" => `GITHUB
    | "PATREON" => `PATREON
    | "OPEN_COLLECTIVE" => `OPEN_COLLECTIVE
    | "KO_FI" => `KO_FI
    | "TIDELIFT" => `TIDELIFT
    | "COMMUNITY_BRIDGE" => `COMMUNITY_BRIDGE
    | "LIBERAPAY" => `LIBERAPAY
    | "ISSUEHUNT" => `ISSUEHUNT
    | "OTECHIE" => `OTECHIE
    | "CUSTOM" => `CUSTOM
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `GITHUB => "GITHUB"
      | `PATREON => "PATREON"
      | `OPEN_COLLECTIVE => "OPEN_COLLECTIVE"
      | `KO_FI => "KO_FI"
      | `TIDELIFT => "TIDELIFT"
      | `COMMUNITY_BRIDGE => "COMMUNITY_BRIDGE"
      | `LIBERAPAY => "LIBERAPAY"
      | `ISSUEHUNT => "ISSUEHUNT"
      | `OTECHIE => "OTECHIE"
      | `CUSTOM => "CUSTOM"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_LanguageOrderField: {
  type t = [ | `SIZE | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `SIZE | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "SIZE" => `SIZE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `SIZE => "SIZE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_MilestoneState: {
  type t = [ | `OPEN | `CLOSED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `OPEN | `CLOSED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OPEN" => `OPEN
    | "CLOSED" => `CLOSED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OPEN => "OPEN"
      | `CLOSED => "CLOSED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_MilestoneOrderField: {
  type t = [
    | `DUE_DATE
    | `CREATED_AT
    | `UPDATED_AT
    | `NUMBER
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `DUE_DATE
    | `CREATED_AT
    | `UPDATED_AT
    | `NUMBER
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "DUE_DATE" => `DUE_DATE
    | "CREATED_AT" => `CREATED_AT
    | "UPDATED_AT" => `UPDATED_AT
    | "NUMBER" => `NUMBER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `DUE_DATE => "DUE_DATE"
      | `CREATED_AT => "CREATED_AT"
      | `UPDATED_AT => "UPDATED_AT"
      | `NUMBER => "NUMBER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ProjectOrderField: {
  type t = [ | `CREATED_AT | `UPDATED_AT | `NAME | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `UPDATED_AT | `NAME | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "UPDATED_AT" => `UPDATED_AT
    | "NAME" => `NAME
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `UPDATED_AT => "UPDATED_AT"
      | `NAME => "NAME"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ProjectState: {
  type t = [ | `OPEN | `CLOSED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `OPEN | `CLOSED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OPEN" => `OPEN
    | "CLOSED" => `CLOSED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OPEN => "OPEN"
      | `CLOSED => "CLOSED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RefOrderField: {
  type t = [ | `TAG_COMMIT_DATE | `ALPHABETICAL | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `TAG_COMMIT_DATE | `ALPHABETICAL | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "TAG_COMMIT_DATE" => `TAG_COMMIT_DATE
    | "ALPHABETICAL" => `ALPHABETICAL
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `TAG_COMMIT_DATE => "TAG_COMMIT_DATE"
      | `ALPHABETICAL => "ALPHABETICAL"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ReleaseOrderField: {
  type t = [ | `CREATED_AT | `NAME | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `NAME | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "NAME" => `NAME
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `NAME => "NAME"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SecurityAdvisorySeverity: {
  type t = [ | `LOW | `MODERATE | `HIGH | `CRITICAL | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `LOW | `MODERATE | `HIGH | `CRITICAL | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "LOW" => `LOW
    | "MODERATE" => `MODERATE
    | "HIGH" => `HIGH
    | "CRITICAL" => `CRITICAL
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `LOW => "LOW"
      | `MODERATE => "MODERATE"
      | `HIGH => "HIGH"
      | `CRITICAL => "CRITICAL"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SecurityVulnerabilityOrderField: {
  type t = [ | `UPDATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `UPDATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "UPDATED_AT" => `UPDATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `UPDATED_AT => "UPDATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SecurityAdvisoryEcosystem: {
  type t = [
    | `RUBYGEMS
    | `NPM
    | `PIP
    | `MAVEN
    | `NUGET
    | `COMPOSER
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `RUBYGEMS
    | `NPM
    | `PIP
    | `MAVEN
    | `NUGET
    | `COMPOSER
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "RUBYGEMS" => `RUBYGEMS
    | "NPM" => `NPM
    | "PIP" => `PIP
    | "MAVEN" => `MAVEN
    | "NUGET" => `NUGET
    | "COMPOSER" => `COMPOSER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `RUBYGEMS => "RUBYGEMS"
      | `NPM => "NPM"
      | `PIP => "PIP"
      | `MAVEN => "MAVEN"
      | `NUGET => "NUGET"
      | `COMPOSER => "COMPOSER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_MergeableState: {
  type t = [ | `MERGEABLE | `CONFLICTING | `UNKNOWN | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `MERGEABLE | `CONFLICTING | `UNKNOWN | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "MERGEABLE" => `MERGEABLE
    | "CONFLICTING" => `CONFLICTING
    | "UNKNOWN" => `UNKNOWN
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `MERGEABLE => "MERGEABLE"
      | `CONFLICTING => "CONFLICTING"
      | `UNKNOWN => "UNKNOWN"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PullRequestReviewDecision: {
  type t = [
    | `CHANGES_REQUESTED
    | `APPROVED
    | `REVIEW_REQUIRED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `CHANGES_REQUESTED
    | `APPROVED
    | `REVIEW_REQUIRED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CHANGES_REQUESTED" => `CHANGES_REQUESTED
    | "APPROVED" => `APPROVED
    | "REVIEW_REQUIRED" => `REVIEW_REQUIRED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CHANGES_REQUESTED => "CHANGES_REQUESTED"
      | `APPROVED => "APPROVED"
      | `REVIEW_REQUIRED => "REVIEW_REQUIRED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PullRequestReviewState: {
  type t = [
    | `PENDING
    | `COMMENTED
    | `APPROVED
    | `CHANGES_REQUESTED
    | `DISMISSED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `PENDING
    | `COMMENTED
    | `APPROVED
    | `CHANGES_REQUESTED
    | `DISMISSED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "PENDING" => `PENDING
    | "COMMENTED" => `COMMENTED
    | "APPROVED" => `APPROVED
    | "CHANGES_REQUESTED" => `CHANGES_REQUESTED
    | "DISMISSED" => `DISMISSED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `PENDING => "PENDING"
      | `COMMENTED => "COMMENTED"
      | `APPROVED => "APPROVED"
      | `CHANGES_REQUESTED => "CHANGES_REQUESTED"
      | `DISMISSED => "DISMISSED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PullRequestReviewCommentState: {
  type t = [ | `PENDING | `SUBMITTED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `PENDING | `SUBMITTED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "PENDING" => `PENDING
    | "SUBMITTED" => `SUBMITTED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `PENDING => "PENDING"
      | `SUBMITTED => "SUBMITTED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_UserBlockDuration: {
  type t = [
    | `ONE_DAY
    | `THREE_DAYS
    | `ONE_WEEK
    | `ONE_MONTH
    | `PERMANENT
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `ONE_DAY
    | `THREE_DAYS
    | `ONE_WEEK
    | `ONE_MONTH
    | `PERMANENT
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ONE_DAY" => `ONE_DAY
    | "THREE_DAYS" => `THREE_DAYS
    | "ONE_WEEK" => `ONE_WEEK
    | "ONE_MONTH" => `ONE_MONTH
    | "PERMANENT" => `PERMANENT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ONE_DAY => "ONE_DAY"
      | `THREE_DAYS => "THREE_DAYS"
      | `ONE_WEEK => "ONE_WEEK"
      | `ONE_MONTH => "ONE_MONTH"
      | `PERMANENT => "PERMANENT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PullRequestTimelineItemsItemType: {
  type t = [
    | `PULL_REQUEST_COMMIT
    | `PULL_REQUEST_COMMIT_COMMENT_THREAD
    | `PULL_REQUEST_REVIEW
    | `PULL_REQUEST_REVIEW_THREAD
    | `PULL_REQUEST_REVISION_MARKER
    | `BASE_REF_CHANGED_EVENT
    | `BASE_REF_FORCE_PUSHED_EVENT
    | `DEPLOYED_EVENT
    | `DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
    | `HEAD_REF_DELETED_EVENT
    | `HEAD_REF_FORCE_PUSHED_EVENT
    | `HEAD_REF_RESTORED_EVENT
    | `MERGED_EVENT
    | `REVIEW_DISMISSED_EVENT
    | `REVIEW_REQUESTED_EVENT
    | `REVIEW_REQUEST_REMOVED_EVENT
    | `READY_FOR_REVIEW_EVENT
    | `ISSUE_COMMENT
    | `CROSS_REFERENCED_EVENT
    | `ADDED_TO_PROJECT_EVENT
    | `ASSIGNED_EVENT
    | `CLOSED_EVENT
    | `COMMENT_DELETED_EVENT
    | `CONNECTED_EVENT
    | `CONVERTED_NOTE_TO_ISSUE_EVENT
    | `DEMILESTONED_EVENT
    | `DISCONNECTED_EVENT
    | `LABELED_EVENT
    | `LOCKED_EVENT
    | `MARKED_AS_DUPLICATE_EVENT
    | `MENTIONED_EVENT
    | `MILESTONED_EVENT
    | `MOVED_COLUMNS_IN_PROJECT_EVENT
    | `PINNED_EVENT
    | `REFERENCED_EVENT
    | `REMOVED_FROM_PROJECT_EVENT
    | `RENAMED_TITLE_EVENT
    | `REOPENED_EVENT
    | `SUBSCRIBED_EVENT
    | `TRANSFERRED_EVENT
    | `UNASSIGNED_EVENT
    | `UNLABELED_EVENT
    | `UNLOCKED_EVENT
    | `USER_BLOCKED_EVENT
    | `UNMARKED_AS_DUPLICATE_EVENT
    | `UNPINNED_EVENT
    | `UNSUBSCRIBED_EVENT
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `PULL_REQUEST_COMMIT
    | `PULL_REQUEST_COMMIT_COMMENT_THREAD
    | `PULL_REQUEST_REVIEW
    | `PULL_REQUEST_REVIEW_THREAD
    | `PULL_REQUEST_REVISION_MARKER
    | `BASE_REF_CHANGED_EVENT
    | `BASE_REF_FORCE_PUSHED_EVENT
    | `DEPLOYED_EVENT
    | `DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
    | `HEAD_REF_DELETED_EVENT
    | `HEAD_REF_FORCE_PUSHED_EVENT
    | `HEAD_REF_RESTORED_EVENT
    | `MERGED_EVENT
    | `REVIEW_DISMISSED_EVENT
    | `REVIEW_REQUESTED_EVENT
    | `REVIEW_REQUEST_REMOVED_EVENT
    | `READY_FOR_REVIEW_EVENT
    | `ISSUE_COMMENT
    | `CROSS_REFERENCED_EVENT
    | `ADDED_TO_PROJECT_EVENT
    | `ASSIGNED_EVENT
    | `CLOSED_EVENT
    | `COMMENT_DELETED_EVENT
    | `CONNECTED_EVENT
    | `CONVERTED_NOTE_TO_ISSUE_EVENT
    | `DEMILESTONED_EVENT
    | `DISCONNECTED_EVENT
    | `LABELED_EVENT
    | `LOCKED_EVENT
    | `MARKED_AS_DUPLICATE_EVENT
    | `MENTIONED_EVENT
    | `MILESTONED_EVENT
    | `MOVED_COLUMNS_IN_PROJECT_EVENT
    | `PINNED_EVENT
    | `REFERENCED_EVENT
    | `REMOVED_FROM_PROJECT_EVENT
    | `RENAMED_TITLE_EVENT
    | `REOPENED_EVENT
    | `SUBSCRIBED_EVENT
    | `TRANSFERRED_EVENT
    | `UNASSIGNED_EVENT
    | `UNLABELED_EVENT
    | `UNLOCKED_EVENT
    | `USER_BLOCKED_EVENT
    | `UNMARKED_AS_DUPLICATE_EVENT
    | `UNPINNED_EVENT
    | `UNSUBSCRIBED_EVENT
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "PULL_REQUEST_COMMIT" => `PULL_REQUEST_COMMIT
    | "PULL_REQUEST_COMMIT_COMMENT_THREAD" => `PULL_REQUEST_COMMIT_COMMENT_THREAD
    | "PULL_REQUEST_REVIEW" => `PULL_REQUEST_REVIEW
    | "PULL_REQUEST_REVIEW_THREAD" => `PULL_REQUEST_REVIEW_THREAD
    | "PULL_REQUEST_REVISION_MARKER" => `PULL_REQUEST_REVISION_MARKER
    | "BASE_REF_CHANGED_EVENT" => `BASE_REF_CHANGED_EVENT
    | "BASE_REF_FORCE_PUSHED_EVENT" => `BASE_REF_FORCE_PUSHED_EVENT
    | "DEPLOYED_EVENT" => `DEPLOYED_EVENT
    | "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT" => `DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
    | "HEAD_REF_DELETED_EVENT" => `HEAD_REF_DELETED_EVENT
    | "HEAD_REF_FORCE_PUSHED_EVENT" => `HEAD_REF_FORCE_PUSHED_EVENT
    | "HEAD_REF_RESTORED_EVENT" => `HEAD_REF_RESTORED_EVENT
    | "MERGED_EVENT" => `MERGED_EVENT
    | "REVIEW_DISMISSED_EVENT" => `REVIEW_DISMISSED_EVENT
    | "REVIEW_REQUESTED_EVENT" => `REVIEW_REQUESTED_EVENT
    | "REVIEW_REQUEST_REMOVED_EVENT" => `REVIEW_REQUEST_REMOVED_EVENT
    | "READY_FOR_REVIEW_EVENT" => `READY_FOR_REVIEW_EVENT
    | "ISSUE_COMMENT" => `ISSUE_COMMENT
    | "CROSS_REFERENCED_EVENT" => `CROSS_REFERENCED_EVENT
    | "ADDED_TO_PROJECT_EVENT" => `ADDED_TO_PROJECT_EVENT
    | "ASSIGNED_EVENT" => `ASSIGNED_EVENT
    | "CLOSED_EVENT" => `CLOSED_EVENT
    | "COMMENT_DELETED_EVENT" => `COMMENT_DELETED_EVENT
    | "CONNECTED_EVENT" => `CONNECTED_EVENT
    | "CONVERTED_NOTE_TO_ISSUE_EVENT" => `CONVERTED_NOTE_TO_ISSUE_EVENT
    | "DEMILESTONED_EVENT" => `DEMILESTONED_EVENT
    | "DISCONNECTED_EVENT" => `DISCONNECTED_EVENT
    | "LABELED_EVENT" => `LABELED_EVENT
    | "LOCKED_EVENT" => `LOCKED_EVENT
    | "MARKED_AS_DUPLICATE_EVENT" => `MARKED_AS_DUPLICATE_EVENT
    | "MENTIONED_EVENT" => `MENTIONED_EVENT
    | "MILESTONED_EVENT" => `MILESTONED_EVENT
    | "MOVED_COLUMNS_IN_PROJECT_EVENT" => `MOVED_COLUMNS_IN_PROJECT_EVENT
    | "PINNED_EVENT" => `PINNED_EVENT
    | "REFERENCED_EVENT" => `REFERENCED_EVENT
    | "REMOVED_FROM_PROJECT_EVENT" => `REMOVED_FROM_PROJECT_EVENT
    | "RENAMED_TITLE_EVENT" => `RENAMED_TITLE_EVENT
    | "REOPENED_EVENT" => `REOPENED_EVENT
    | "SUBSCRIBED_EVENT" => `SUBSCRIBED_EVENT
    | "TRANSFERRED_EVENT" => `TRANSFERRED_EVENT
    | "UNASSIGNED_EVENT" => `UNASSIGNED_EVENT
    | "UNLABELED_EVENT" => `UNLABELED_EVENT
    | "UNLOCKED_EVENT" => `UNLOCKED_EVENT
    | "USER_BLOCKED_EVENT" => `USER_BLOCKED_EVENT
    | "UNMARKED_AS_DUPLICATE_EVENT" => `UNMARKED_AS_DUPLICATE_EVENT
    | "UNPINNED_EVENT" => `UNPINNED_EVENT
    | "UNSUBSCRIBED_EVENT" => `UNSUBSCRIBED_EVENT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `PULL_REQUEST_COMMIT => "PULL_REQUEST_COMMIT"
      | `PULL_REQUEST_COMMIT_COMMENT_THREAD => "PULL_REQUEST_COMMIT_COMMENT_THREAD"
      | `PULL_REQUEST_REVIEW => "PULL_REQUEST_REVIEW"
      | `PULL_REQUEST_REVIEW_THREAD => "PULL_REQUEST_REVIEW_THREAD"
      | `PULL_REQUEST_REVISION_MARKER => "PULL_REQUEST_REVISION_MARKER"
      | `BASE_REF_CHANGED_EVENT => "BASE_REF_CHANGED_EVENT"
      | `BASE_REF_FORCE_PUSHED_EVENT => "BASE_REF_FORCE_PUSHED_EVENT"
      | `DEPLOYED_EVENT => "DEPLOYED_EVENT"
      | `DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT => "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT"
      | `HEAD_REF_DELETED_EVENT => "HEAD_REF_DELETED_EVENT"
      | `HEAD_REF_FORCE_PUSHED_EVENT => "HEAD_REF_FORCE_PUSHED_EVENT"
      | `HEAD_REF_RESTORED_EVENT => "HEAD_REF_RESTORED_EVENT"
      | `MERGED_EVENT => "MERGED_EVENT"
      | `REVIEW_DISMISSED_EVENT => "REVIEW_DISMISSED_EVENT"
      | `REVIEW_REQUESTED_EVENT => "REVIEW_REQUESTED_EVENT"
      | `REVIEW_REQUEST_REMOVED_EVENT => "REVIEW_REQUEST_REMOVED_EVENT"
      | `READY_FOR_REVIEW_EVENT => "READY_FOR_REVIEW_EVENT"
      | `ISSUE_COMMENT => "ISSUE_COMMENT"
      | `CROSS_REFERENCED_EVENT => "CROSS_REFERENCED_EVENT"
      | `ADDED_TO_PROJECT_EVENT => "ADDED_TO_PROJECT_EVENT"
      | `ASSIGNED_EVENT => "ASSIGNED_EVENT"
      | `CLOSED_EVENT => "CLOSED_EVENT"
      | `COMMENT_DELETED_EVENT => "COMMENT_DELETED_EVENT"
      | `CONNECTED_EVENT => "CONNECTED_EVENT"
      | `CONVERTED_NOTE_TO_ISSUE_EVENT => "CONVERTED_NOTE_TO_ISSUE_EVENT"
      | `DEMILESTONED_EVENT => "DEMILESTONED_EVENT"
      | `DISCONNECTED_EVENT => "DISCONNECTED_EVENT"
      | `LABELED_EVENT => "LABELED_EVENT"
      | `LOCKED_EVENT => "LOCKED_EVENT"
      | `MARKED_AS_DUPLICATE_EVENT => "MARKED_AS_DUPLICATE_EVENT"
      | `MENTIONED_EVENT => "MENTIONED_EVENT"
      | `MILESTONED_EVENT => "MILESTONED_EVENT"
      | `MOVED_COLUMNS_IN_PROJECT_EVENT => "MOVED_COLUMNS_IN_PROJECT_EVENT"
      | `PINNED_EVENT => "PINNED_EVENT"
      | `REFERENCED_EVENT => "REFERENCED_EVENT"
      | `REMOVED_FROM_PROJECT_EVENT => "REMOVED_FROM_PROJECT_EVENT"
      | `RENAMED_TITLE_EVENT => "RENAMED_TITLE_EVENT"
      | `REOPENED_EVENT => "REOPENED_EVENT"
      | `SUBSCRIBED_EVENT => "SUBSCRIBED_EVENT"
      | `TRANSFERRED_EVENT => "TRANSFERRED_EVENT"
      | `UNASSIGNED_EVENT => "UNASSIGNED_EVENT"
      | `UNLABELED_EVENT => "UNLABELED_EVENT"
      | `UNLOCKED_EVENT => "UNLOCKED_EVENT"
      | `USER_BLOCKED_EVENT => "USER_BLOCKED_EVENT"
      | `UNMARKED_AS_DUPLICATE_EVENT => "UNMARKED_AS_DUPLICATE_EVENT"
      | `UNPINNED_EVENT => "UNPINNED_EVENT"
      | `UNSUBSCRIBED_EVENT => "UNSUBSCRIBED_EVENT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_IssueTimelineItemsItemType: {
  type t = [
    | `ISSUE_COMMENT
    | `CROSS_REFERENCED_EVENT
    | `ADDED_TO_PROJECT_EVENT
    | `ASSIGNED_EVENT
    | `CLOSED_EVENT
    | `COMMENT_DELETED_EVENT
    | `CONNECTED_EVENT
    | `CONVERTED_NOTE_TO_ISSUE_EVENT
    | `DEMILESTONED_EVENT
    | `DISCONNECTED_EVENT
    | `LABELED_EVENT
    | `LOCKED_EVENT
    | `MARKED_AS_DUPLICATE_EVENT
    | `MENTIONED_EVENT
    | `MILESTONED_EVENT
    | `MOVED_COLUMNS_IN_PROJECT_EVENT
    | `PINNED_EVENT
    | `REFERENCED_EVENT
    | `REMOVED_FROM_PROJECT_EVENT
    | `RENAMED_TITLE_EVENT
    | `REOPENED_EVENT
    | `SUBSCRIBED_EVENT
    | `TRANSFERRED_EVENT
    | `UNASSIGNED_EVENT
    | `UNLABELED_EVENT
    | `UNLOCKED_EVENT
    | `USER_BLOCKED_EVENT
    | `UNMARKED_AS_DUPLICATE_EVENT
    | `UNPINNED_EVENT
    | `UNSUBSCRIBED_EVENT
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `ISSUE_COMMENT
    | `CROSS_REFERENCED_EVENT
    | `ADDED_TO_PROJECT_EVENT
    | `ASSIGNED_EVENT
    | `CLOSED_EVENT
    | `COMMENT_DELETED_EVENT
    | `CONNECTED_EVENT
    | `CONVERTED_NOTE_TO_ISSUE_EVENT
    | `DEMILESTONED_EVENT
    | `DISCONNECTED_EVENT
    | `LABELED_EVENT
    | `LOCKED_EVENT
    | `MARKED_AS_DUPLICATE_EVENT
    | `MENTIONED_EVENT
    | `MILESTONED_EVENT
    | `MOVED_COLUMNS_IN_PROJECT_EVENT
    | `PINNED_EVENT
    | `REFERENCED_EVENT
    | `REMOVED_FROM_PROJECT_EVENT
    | `RENAMED_TITLE_EVENT
    | `REOPENED_EVENT
    | `SUBSCRIBED_EVENT
    | `TRANSFERRED_EVENT
    | `UNASSIGNED_EVENT
    | `UNLABELED_EVENT
    | `UNLOCKED_EVENT
    | `USER_BLOCKED_EVENT
    | `UNMARKED_AS_DUPLICATE_EVENT
    | `UNPINNED_EVENT
    | `UNSUBSCRIBED_EVENT
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ISSUE_COMMENT" => `ISSUE_COMMENT
    | "CROSS_REFERENCED_EVENT" => `CROSS_REFERENCED_EVENT
    | "ADDED_TO_PROJECT_EVENT" => `ADDED_TO_PROJECT_EVENT
    | "ASSIGNED_EVENT" => `ASSIGNED_EVENT
    | "CLOSED_EVENT" => `CLOSED_EVENT
    | "COMMENT_DELETED_EVENT" => `COMMENT_DELETED_EVENT
    | "CONNECTED_EVENT" => `CONNECTED_EVENT
    | "CONVERTED_NOTE_TO_ISSUE_EVENT" => `CONVERTED_NOTE_TO_ISSUE_EVENT
    | "DEMILESTONED_EVENT" => `DEMILESTONED_EVENT
    | "DISCONNECTED_EVENT" => `DISCONNECTED_EVENT
    | "LABELED_EVENT" => `LABELED_EVENT
    | "LOCKED_EVENT" => `LOCKED_EVENT
    | "MARKED_AS_DUPLICATE_EVENT" => `MARKED_AS_DUPLICATE_EVENT
    | "MENTIONED_EVENT" => `MENTIONED_EVENT
    | "MILESTONED_EVENT" => `MILESTONED_EVENT
    | "MOVED_COLUMNS_IN_PROJECT_EVENT" => `MOVED_COLUMNS_IN_PROJECT_EVENT
    | "PINNED_EVENT" => `PINNED_EVENT
    | "REFERENCED_EVENT" => `REFERENCED_EVENT
    | "REMOVED_FROM_PROJECT_EVENT" => `REMOVED_FROM_PROJECT_EVENT
    | "RENAMED_TITLE_EVENT" => `RENAMED_TITLE_EVENT
    | "REOPENED_EVENT" => `REOPENED_EVENT
    | "SUBSCRIBED_EVENT" => `SUBSCRIBED_EVENT
    | "TRANSFERRED_EVENT" => `TRANSFERRED_EVENT
    | "UNASSIGNED_EVENT" => `UNASSIGNED_EVENT
    | "UNLABELED_EVENT" => `UNLABELED_EVENT
    | "UNLOCKED_EVENT" => `UNLOCKED_EVENT
    | "USER_BLOCKED_EVENT" => `USER_BLOCKED_EVENT
    | "UNMARKED_AS_DUPLICATE_EVENT" => `UNMARKED_AS_DUPLICATE_EVENT
    | "UNPINNED_EVENT" => `UNPINNED_EVENT
    | "UNSUBSCRIBED_EVENT" => `UNSUBSCRIBED_EVENT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ISSUE_COMMENT => "ISSUE_COMMENT"
      | `CROSS_REFERENCED_EVENT => "CROSS_REFERENCED_EVENT"
      | `ADDED_TO_PROJECT_EVENT => "ADDED_TO_PROJECT_EVENT"
      | `ASSIGNED_EVENT => "ASSIGNED_EVENT"
      | `CLOSED_EVENT => "CLOSED_EVENT"
      | `COMMENT_DELETED_EVENT => "COMMENT_DELETED_EVENT"
      | `CONNECTED_EVENT => "CONNECTED_EVENT"
      | `CONVERTED_NOTE_TO_ISSUE_EVENT => "CONVERTED_NOTE_TO_ISSUE_EVENT"
      | `DEMILESTONED_EVENT => "DEMILESTONED_EVENT"
      | `DISCONNECTED_EVENT => "DISCONNECTED_EVENT"
      | `LABELED_EVENT => "LABELED_EVENT"
      | `LOCKED_EVENT => "LOCKED_EVENT"
      | `MARKED_AS_DUPLICATE_EVENT => "MARKED_AS_DUPLICATE_EVENT"
      | `MENTIONED_EVENT => "MENTIONED_EVENT"
      | `MILESTONED_EVENT => "MILESTONED_EVENT"
      | `MOVED_COLUMNS_IN_PROJECT_EVENT => "MOVED_COLUMNS_IN_PROJECT_EVENT"
      | `PINNED_EVENT => "PINNED_EVENT"
      | `REFERENCED_EVENT => "REFERENCED_EVENT"
      | `REMOVED_FROM_PROJECT_EVENT => "REMOVED_FROM_PROJECT_EVENT"
      | `RENAMED_TITLE_EVENT => "RENAMED_TITLE_EVENT"
      | `REOPENED_EVENT => "REOPENED_EVENT"
      | `SUBSCRIBED_EVENT => "SUBSCRIBED_EVENT"
      | `TRANSFERRED_EVENT => "TRANSFERRED_EVENT"
      | `UNASSIGNED_EVENT => "UNASSIGNED_EVENT"
      | `UNLABELED_EVENT => "UNLABELED_EVENT"
      | `UNLOCKED_EVENT => "UNLOCKED_EVENT"
      | `USER_BLOCKED_EVENT => "USER_BLOCKED_EVENT"
      | `UNMARKED_AS_DUPLICATE_EVENT => "UNMARKED_AS_DUPLICATE_EVENT"
      | `UNPINNED_EVENT => "UNPINNED_EVENT"
      | `UNSUBSCRIBED_EVENT => "UNSUBSCRIBED_EVENT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ProjectCardState: {
  type t = [ | `CONTENT_ONLY | `NOTE_ONLY | `REDACTED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CONTENT_ONLY | `NOTE_ONLY | `REDACTED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CONTENT_ONLY" => `CONTENT_ONLY
    | "NOTE_ONLY" => `NOTE_ONLY
    | "REDACTED" => `REDACTED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CONTENT_ONLY => "CONTENT_ONLY"
      | `NOTE_ONLY => "NOTE_ONLY"
      | `REDACTED => "REDACTED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ProjectColumnPurpose: {
  type t = [ | `TODO | `IN_PROGRESS | `DONE | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `TODO | `IN_PROGRESS | `DONE | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "TODO" => `TODO
    | "IN_PROGRESS" => `IN_PROGRESS
    | "DONE" => `DONE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `TODO => "TODO"
      | `IN_PROGRESS => "IN_PROGRESS"
      | `DONE => "DONE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PinnableItemType: {
  type t = [
    | `REPOSITORY
    | `GIST
    | `ISSUE
    | `PROJECT
    | `PULL_REQUEST
    | `USER
    | `ORGANIZATION
    | `TEAM
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `REPOSITORY
    | `GIST
    | `ISSUE
    | `PROJECT
    | `PULL_REQUEST
    | `USER
    | `ORGANIZATION
    | `TEAM
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "REPOSITORY" => `REPOSITORY
    | "GIST" => `GIST
    | "ISSUE" => `ISSUE
    | "PROJECT" => `PROJECT
    | "PULL_REQUEST" => `PULL_REQUEST
    | "USER" => `USER
    | "ORGANIZATION" => `ORGANIZATION
    | "TEAM" => `TEAM
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `REPOSITORY => "REPOSITORY"
      | `GIST => "GIST"
      | `ISSUE => "ISSUE"
      | `PROJECT => "PROJECT"
      | `PULL_REQUEST => "PULL_REQUEST"
      | `USER => "USER"
      | `ORGANIZATION => "ORGANIZATION"
      | `TEAM => "TEAM"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_GistOrderField: {
  type t = [ | `CREATED_AT | `UPDATED_AT | `PUSHED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `UPDATED_AT | `PUSHED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "UPDATED_AT" => `UPDATED_AT
    | "PUSHED_AT" => `PUSHED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `UPDATED_AT => "UPDATED_AT"
      | `PUSHED_AT => "PUSHED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SponsorsTierOrderField: {
  type t = [ | `CREATED_AT | `MONTHLY_PRICE_IN_CENTS | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `MONTHLY_PRICE_IN_CENTS | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "MONTHLY_PRICE_IN_CENTS" => `MONTHLY_PRICE_IN_CENTS
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `MONTHLY_PRICE_IN_CENTS => "MONTHLY_PRICE_IN_CENTS"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SponsorshipOrderField: {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SponsorshipPrivacy: {
  type t = [ | `PUBLIC | `PRIVATE | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `PUBLIC | `PRIVATE | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "PUBLIC" => `PUBLIC
    | "PRIVATE" => `PRIVATE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `PUBLIC => "PUBLIC"
      | `PRIVATE => "PRIVATE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_CommitContributionOrderField: {
  type t = [ | `OCCURRED_AT | `COMMIT_COUNT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `OCCURRED_AT | `COMMIT_COUNT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OCCURRED_AT" => `OCCURRED_AT
    | "COMMIT_COUNT" => `COMMIT_COUNT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OCCURRED_AT => "OCCURRED_AT"
      | `COMMIT_COUNT => "COMMIT_COUNT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ContributionOrderField: {
  type t = [ | `OCCURRED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `OCCURRED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OCCURRED_AT" => `OCCURRED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OCCURRED_AT => "OCCURRED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_GistPrivacy: {
  type t = [ | `PUBLIC | `SECRET | `ALL | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `PUBLIC | `SECRET | `ALL | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "PUBLIC" => `PUBLIC
    | "SECRET" => `SECRET
    | "ALL" => `ALL
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `PUBLIC => "PUBLIC"
      | `SECRET => "SECRET"
      | `ALL => "ALL"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepositoryContributionType: {
  type t = [
    | `COMMIT
    | `ISSUE
    | `PULL_REQUEST
    | `REPOSITORY
    | `PULL_REQUEST_REVIEW
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `COMMIT
    | `ISSUE
    | `PULL_REQUEST
    | `REPOSITORY
    | `PULL_REQUEST_REVIEW
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "COMMIT" => `COMMIT
    | "ISSUE" => `ISSUE
    | "PULL_REQUEST" => `PULL_REQUEST
    | "REPOSITORY" => `REPOSITORY
    | "PULL_REQUEST_REVIEW" => `PULL_REQUEST_REVIEW
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `COMMIT => "COMMIT"
      | `ISSUE => "ISSUE"
      | `PULL_REQUEST => "PULL_REQUEST"
      | `REPOSITORY => "REPOSITORY"
      | `PULL_REQUEST_REVIEW => "PULL_REQUEST_REVIEW"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SavedReplyOrderField: {
  type t = [ | `UPDATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `UPDATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "UPDATED_AT" => `UPDATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `UPDATED_AT => "UPDATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_AuditLogOrderField: {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OperationType: {
  type t = [
    | `ACCESS
    | `AUTHENTICATION
    | `CREATE
    | `MODIFY
    | `REMOVE
    | `RESTORE
    | `TRANSFER
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `ACCESS
    | `AUTHENTICATION
    | `CREATE
    | `MODIFY
    | `REMOVE
    | `RESTORE
    | `TRANSFER
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ACCESS" => `ACCESS
    | "AUTHENTICATION" => `AUTHENTICATION
    | "CREATE" => `CREATE
    | "MODIFY" => `MODIFY
    | "REMOVE" => `REMOVE
    | "RESTORE" => `RESTORE
    | "TRANSFER" => `TRANSFER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ACCESS => "ACCESS"
      | `AUTHENTICATION => "AUTHENTICATION"
      | `CREATE => "CREATE"
      | `MODIFY => "MODIFY"
      | `REMOVE => "REMOVE"
      | `RESTORE => "RESTORE"
      | `TRANSFER => "TRANSFER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OauthApplicationCreateAuditEntryState: {
  type t = [
    | `ACTIVE
    | `SUSPENDED
    | `PENDING_DELETION
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `ACTIVE
    | `SUSPENDED
    | `PENDING_DELETION
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ACTIVE" => `ACTIVE
    | "SUSPENDED" => `SUSPENDED
    | "PENDING_DELETION" => `PENDING_DELETION
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ACTIVE => "ACTIVE"
      | `SUSPENDED => "SUSPENDED"
      | `PENDING_DELETION => "PENDING_DELETION"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrgAddMemberAuditEntryPermission: {
  type t = [ | `READ | `ADMIN | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `READ | `ADMIN | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "READ" => `READ
    | "ADMIN" => `ADMIN
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `READ => "READ"
      | `ADMIN => "ADMIN"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrgCreateAuditEntryBillingPlan: {
  type t = [
    | `FREE
    | `BUSINESS
    | `BUSINESS_PLUS
    | `UNLIMITED
    | `TIERED_PER_SEAT
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `FREE
    | `BUSINESS
    | `BUSINESS_PLUS
    | `UNLIMITED
    | `TIERED_PER_SEAT
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "FREE" => `FREE
    | "BUSINESS" => `BUSINESS
    | "BUSINESS_PLUS" => `BUSINESS_PLUS
    | "UNLIMITED" => `UNLIMITED
    | "TIERED_PER_SEAT" => `TIERED_PER_SEAT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `FREE => "FREE"
      | `BUSINESS => "BUSINESS"
      | `BUSINESS_PLUS => "BUSINESS_PLUS"
      | `UNLIMITED => "UNLIMITED"
      | `TIERED_PER_SEAT => "TIERED_PER_SEAT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrgRemoveBillingManagerAuditEntryReason: {
  type t = [
    | `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
    | `SAML_EXTERNAL_IDENTITY_MISSING
    | `SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
    | `SAML_EXTERNAL_IDENTITY_MISSING
    | `SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE" => `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
    | "SAML_EXTERNAL_IDENTITY_MISSING" => `SAML_EXTERNAL_IDENTITY_MISSING
    | "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY" => `SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE => "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
      | `SAML_EXTERNAL_IDENTITY_MISSING => "SAML_EXTERNAL_IDENTITY_MISSING"
      | `SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY => "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrgRemoveMemberAuditEntryMembershipType: {
  type t = [
    | `DIRECT_MEMBER
    | `ADMIN
    | `BILLING_MANAGER
    | `UNAFFILIATED
    | `OUTSIDE_COLLABORATOR
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `DIRECT_MEMBER
    | `ADMIN
    | `BILLING_MANAGER
    | `UNAFFILIATED
    | `OUTSIDE_COLLABORATOR
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "DIRECT_MEMBER" => `DIRECT_MEMBER
    | "ADMIN" => `ADMIN
    | "BILLING_MANAGER" => `BILLING_MANAGER
    | "UNAFFILIATED" => `UNAFFILIATED
    | "OUTSIDE_COLLABORATOR" => `OUTSIDE_COLLABORATOR
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `DIRECT_MEMBER => "DIRECT_MEMBER"
      | `ADMIN => "ADMIN"
      | `BILLING_MANAGER => "BILLING_MANAGER"
      | `UNAFFILIATED => "UNAFFILIATED"
      | `OUTSIDE_COLLABORATOR => "OUTSIDE_COLLABORATOR"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrgRemoveMemberAuditEntryReason: {
  type t = [
    | `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
    | `SAML_EXTERNAL_IDENTITY_MISSING
    | `SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
    | `SAML_EXTERNAL_IDENTITY_MISSING
    | `SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE" => `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
    | "SAML_EXTERNAL_IDENTITY_MISSING" => `SAML_EXTERNAL_IDENTITY_MISSING
    | "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY" => `SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE => "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
      | `SAML_EXTERNAL_IDENTITY_MISSING => "SAML_EXTERNAL_IDENTITY_MISSING"
      | `SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY => "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrgRemoveOutsideCollaboratorAuditEntryMembershipType: {
  type t = [
    | `OUTSIDE_COLLABORATOR
    | `UNAFFILIATED
    | `BILLING_MANAGER
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `OUTSIDE_COLLABORATOR
    | `UNAFFILIATED
    | `BILLING_MANAGER
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OUTSIDE_COLLABORATOR" => `OUTSIDE_COLLABORATOR
    | "UNAFFILIATED" => `UNAFFILIATED
    | "BILLING_MANAGER" => `BILLING_MANAGER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OUTSIDE_COLLABORATOR => "OUTSIDE_COLLABORATOR"
      | `UNAFFILIATED => "UNAFFILIATED"
      | `BILLING_MANAGER => "BILLING_MANAGER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrgRemoveOutsideCollaboratorAuditEntryReason: {
  type t = [
    | `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
    | `SAML_EXTERNAL_IDENTITY_MISSING
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
    | `SAML_EXTERNAL_IDENTITY_MISSING
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE" => `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
    | "SAML_EXTERNAL_IDENTITY_MISSING" => `SAML_EXTERNAL_IDENTITY_MISSING
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE => "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
      | `SAML_EXTERNAL_IDENTITY_MISSING => "SAML_EXTERNAL_IDENTITY_MISSING"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission: {
  type t = [ | `READ | `WRITE | `ADMIN | `NONE | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `READ | `WRITE | `ADMIN | `NONE | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "READ" => `READ
    | "WRITE" => `WRITE
    | "ADMIN" => `ADMIN
    | "NONE" => `NONE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `READ => "READ"
      | `WRITE => "WRITE"
      | `ADMIN => "ADMIN"
      | `NONE => "NONE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrgUpdateMemberAuditEntryPermission: {
  type t = [ | `READ | `ADMIN | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `READ | `ADMIN | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "READ" => `READ
    | "ADMIN" => `ADMIN
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `READ => "READ"
      | `ADMIN => "ADMIN"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility: {
  type t = [ | `ALL | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `ALL | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ALL" => `ALL
    | "PUBLIC" => `PUBLIC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ALL => "ALL"
      | `PUBLIC => "PUBLIC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepoAccessAuditEntryVisibility: {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "INTERNAL" => `INTERNAL
    | "PRIVATE" => `PRIVATE
    | "PUBLIC" => `PUBLIC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `INTERNAL => "INTERNAL"
      | `PRIVATE => "PRIVATE"
      | `PUBLIC => "PUBLIC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepoAddMemberAuditEntryVisibility: {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "INTERNAL" => `INTERNAL
    | "PRIVATE" => `PRIVATE
    | "PUBLIC" => `PUBLIC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `INTERNAL => "INTERNAL"
      | `PRIVATE => "PRIVATE"
      | `PUBLIC => "PUBLIC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepoArchivedAuditEntryVisibility: {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "INTERNAL" => `INTERNAL
    | "PRIVATE" => `PRIVATE
    | "PUBLIC" => `PUBLIC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `INTERNAL => "INTERNAL"
      | `PRIVATE => "PRIVATE"
      | `PUBLIC => "PUBLIC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepoChangeMergeSettingAuditEntryMergeType: {
  type t = [ | `MERGE | `REBASE | `SQUASH | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `MERGE | `REBASE | `SQUASH | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "MERGE" => `MERGE
    | "REBASE" => `REBASE
    | "SQUASH" => `SQUASH
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `MERGE => "MERGE"
      | `REBASE => "REBASE"
      | `SQUASH => "SQUASH"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepoCreateAuditEntryVisibility: {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "INTERNAL" => `INTERNAL
    | "PRIVATE" => `PRIVATE
    | "PUBLIC" => `PUBLIC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `INTERNAL => "INTERNAL"
      | `PRIVATE => "PRIVATE"
      | `PUBLIC => "PUBLIC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepoDestroyAuditEntryVisibility: {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "INTERNAL" => `INTERNAL
    | "PRIVATE" => `PRIVATE
    | "PUBLIC" => `PUBLIC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `INTERNAL => "INTERNAL"
      | `PRIVATE => "PRIVATE"
      | `PUBLIC => "PUBLIC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepoRemoveMemberAuditEntryVisibility: {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `INTERNAL | `PRIVATE | `PUBLIC | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "INTERNAL" => `INTERNAL
    | "PRIVATE" => `PRIVATE
    | "PUBLIC" => `PUBLIC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `INTERNAL => "INTERNAL"
      | `PRIVATE => "PRIVATE"
      | `PUBLIC => "PUBLIC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrganizationMemberRole: {
  type t = [ | `MEMBER | `ADMIN | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `MEMBER | `ADMIN | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "MEMBER" => `MEMBER
    | "ADMIN" => `ADMIN
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `MEMBER => "MEMBER"
      | `ADMIN => "ADMIN"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TeamRole: {
  type t = [ | `ADMIN | `MEMBER | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `ADMIN | `MEMBER | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ADMIN" => `ADMIN
    | "MEMBER" => `MEMBER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ADMIN => "ADMIN"
      | `MEMBER => "MEMBER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseAdministratorRole: {
  type t = [ | `OWNER | `BILLING_MANAGER | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `OWNER | `BILLING_MANAGER | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OWNER" => `OWNER
    | "BILLING_MANAGER" => `BILLING_MANAGER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OWNER => "OWNER"
      | `BILLING_MANAGER => "BILLING_MANAGER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseEnabledDisabledSettingValue: {
  type t = [ | `ENABLED | `DISABLED | `NO_POLICY | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `ENABLED | `DISABLED | `NO_POLICY | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ENABLED" => `ENABLED
    | "DISABLED" => `DISABLED
    | "NO_POLICY" => `NO_POLICY
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ENABLED => "ENABLED"
      | `DISABLED => "DISABLED"
      | `NO_POLICY => "NO_POLICY"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseDefaultRepositoryPermissionSettingValue: {
  type t = [
    | `NO_POLICY
    | `ADMIN
    | `WRITE
    | `READ
    | `NONE
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `NO_POLICY
    | `ADMIN
    | `WRITE
    | `READ
    | `NONE
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NO_POLICY" => `NO_POLICY
    | "ADMIN" => `ADMIN
    | "WRITE" => `WRITE
    | "READ" => `READ
    | "NONE" => `NONE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NO_POLICY => "NO_POLICY"
      | `ADMIN => "ADMIN"
      | `WRITE => "WRITE"
      | `READ => "READ"
      | `NONE => "NONE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseServerInstallationOrderField: {
  type t = [
    | `HOST_NAME
    | `CUSTOMER_NAME
    | `CREATED_AT
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `HOST_NAME
    | `CUSTOMER_NAME
    | `CREATED_AT
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "HOST_NAME" => `HOST_NAME
    | "CUSTOMER_NAME" => `CUSTOMER_NAME
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `HOST_NAME => "HOST_NAME"
      | `CUSTOMER_NAME => "CUSTOMER_NAME"
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseServerUserAccountOrderField: {
  type t = [ | `LOGIN | `REMOTE_CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `LOGIN | `REMOTE_CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "LOGIN" => `LOGIN
    | "REMOTE_CREATED_AT" => `REMOTE_CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `LOGIN => "LOGIN"
      | `REMOTE_CREATED_AT => "REMOTE_CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseServerUserAccountEmailOrderField: {
  type t = [ | `EMAIL | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `EMAIL | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "EMAIL" => `EMAIL
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `EMAIL => "EMAIL"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseServerUserAccountsUploadOrderField: {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseServerUserAccountsUploadSyncState: {
  type t = [ | `PENDING | `SUCCESS | `FAILURE | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `PENDING | `SUCCESS | `FAILURE | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "PENDING" => `PENDING
    | "SUCCESS" => `SUCCESS
    | "FAILURE" => `FAILURE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `PENDING => "PENDING"
      | `SUCCESS => "SUCCESS"
      | `FAILURE => "FAILURE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_IpAllowListEnabledSettingValue: {
  type t = [ | `ENABLED | `DISABLED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `ENABLED | `DISABLED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ENABLED" => `ENABLED
    | "DISABLED" => `DISABLED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ENABLED => "ENABLED"
      | `DISABLED => "DISABLED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_IpAllowListEntryOrderField: {
  type t = [ | `CREATED_AT | `ALLOW_LIST_VALUE | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `ALLOW_LIST_VALUE | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "ALLOW_LIST_VALUE" => `ALLOW_LIST_VALUE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `ALLOW_LIST_VALUE => "ALLOW_LIST_VALUE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseMembersCanCreateRepositoriesSettingValue: {
  type t = [
    | `NO_POLICY
    | `ALL
    | `PUBLIC
    | `PRIVATE
    | `DISABLED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `NO_POLICY
    | `ALL
    | `PUBLIC
    | `PRIVATE
    | `DISABLED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NO_POLICY" => `NO_POLICY
    | "ALL" => `ALL
    | "PUBLIC" => `PUBLIC
    | "PRIVATE" => `PRIVATE
    | "DISABLED" => `DISABLED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NO_POLICY => "NO_POLICY"
      | `ALL => "ALL"
      | `PUBLIC => "PUBLIC"
      | `PRIVATE => "PRIVATE"
      | `DISABLED => "DISABLED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_OrganizationMembersCanCreateRepositoriesSettingValue: {
  type t = [ | `ALL | `PRIVATE | `DISABLED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `ALL | `PRIVATE | `DISABLED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ALL" => `ALL
    | "PRIVATE" => `PRIVATE
    | "DISABLED" => `DISABLED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ALL => "ALL"
      | `PRIVATE => "PRIVATE"
      | `DISABLED => "DISABLED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseMembersCanMakePurchasesSettingValue: {
  type t = [ | `ENABLED | `DISABLED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `ENABLED | `DISABLED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ENABLED" => `ENABLED
    | "DISABLED" => `DISABLED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ENABLED => "ENABLED"
      | `DISABLED => "DISABLED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepositoryVisibility: {
  type t = [ | `PRIVATE | `PUBLIC | `INTERNAL | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `PRIVATE | `PUBLIC | `INTERNAL | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "PRIVATE" => `PRIVATE
    | "PUBLIC" => `PUBLIC
    | "INTERNAL" => `INTERNAL
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `PRIVATE => "PRIVATE"
      | `PUBLIC => "PUBLIC"
      | `INTERNAL => "INTERNAL"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseAdministratorInvitationOrderField: {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_RepositoryInvitationOrderField: {
  type t = [ | `CREATED_AT | `INVITEE_LOGIN | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CREATED_AT | `INVITEE_LOGIN | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CREATED_AT" => `CREATED_AT
    | "INVITEE_LOGIN" => `INVITEE_LOGIN
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CREATED_AT => "CREATED_AT"
      | `INVITEE_LOGIN => "INVITEE_LOGIN"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SamlDigestAlgorithm: {
  type t = [ | `SHA1 | `SHA256 | `SHA384 | `SHA512 | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `SHA1 | `SHA256 | `SHA384 | `SHA512 | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "SHA1" => `SHA1
    | "SHA256" => `SHA256
    | "SHA384" => `SHA384
    | "SHA512" => `SHA512
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `SHA1 => "SHA1"
      | `SHA256 => "SHA256"
      | `SHA384 => "SHA384"
      | `SHA512 => "SHA512"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SamlSignatureAlgorithm: {
  type t = [
    | `RSA_SHA1
    | `RSA_SHA256
    | `RSA_SHA384
    | `RSA_SHA512
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `RSA_SHA1
    | `RSA_SHA256
    | `RSA_SHA384
    | `RSA_SHA512
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "RSA_SHA1" => `RSA_SHA1
    | "RSA_SHA256" => `RSA_SHA256
    | "RSA_SHA384" => `RSA_SHA384
    | "RSA_SHA512" => `RSA_SHA512
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `RSA_SHA1 => "RSA_SHA1"
      | `RSA_SHA256 => "RSA_SHA256"
      | `RSA_SHA384 => "RSA_SHA384"
      | `RSA_SHA512 => "RSA_SHA512"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_IdentityProviderConfigurationState: {
  type t = [
    | `ENFORCED
    | `CONFIGURED
    | `UNCONFIGURED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `ENFORCED
    | `CONFIGURED
    | `UNCONFIGURED
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ENFORCED" => `ENFORCED
    | "CONFIGURED" => `CONFIGURED
    | "UNCONFIGURED" => `UNCONFIGURED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ENFORCED => "ENFORCED"
      | `CONFIGURED => "CONFIGURED"
      | `UNCONFIGURED => "UNCONFIGURED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_EnterpriseEnabledSettingValue: {
  type t = [ | `ENABLED | `NO_POLICY | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `ENABLED | `NO_POLICY | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ENABLED" => `ENABLED
    | "NO_POLICY" => `NO_POLICY
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ENABLED => "ENABLED"
      | `NO_POLICY => "NO_POLICY"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SearchType: {
  type t = [ | `ISSUE | `REPOSITORY | `USER | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `ISSUE | `REPOSITORY | `USER | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "ISSUE" => `ISSUE
    | "REPOSITORY" => `REPOSITORY
    | "USER" => `USER
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `ISSUE => "ISSUE"
      | `REPOSITORY => "REPOSITORY"
      | `USER => "USER"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SecurityAdvisoryOrderField: {
  type t = [ | `PUBLISHED_AT | `UPDATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `PUBLISHED_AT | `UPDATED_AT | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "PUBLISHED_AT" => `PUBLISHED_AT
    | "UPDATED_AT" => `UPDATED_AT
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `PUBLISHED_AT => "PUBLISHED_AT"
      | `UPDATED_AT => "UPDATED_AT"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SecurityAdvisoryIdentifierType: {
  type t = [ | `CVE | `GHSA | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `CVE | `GHSA | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "CVE" => `CVE
    | "GHSA" => `GHSA
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `CVE => "CVE"
      | `GHSA => "GHSA"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PullRequestReviewEvent: {
  type t = [
    | `COMMENT
    | `APPROVE
    | `REQUEST_CHANGES
    | `DISMISS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `COMMENT
    | `APPROVE
    | `REQUEST_CHANGES
    | `DISMISS
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "COMMENT" => `COMMENT
    | "APPROVE" => `APPROVE
    | "REQUEST_CHANGES" => `REQUEST_CHANGES
    | "DISMISS" => `DISMISS
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `COMMENT => "COMMENT"
      | `APPROVE => "APPROVE"
      | `REQUEST_CHANGES => "REQUEST_CHANGES"
      | `DISMISS => "DISMISS"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ProjectTemplate: {
  type t = [
    | `BASIC_KANBAN
    | `AUTOMATED_KANBAN_V2
    | `AUTOMATED_REVIEWS_KANBAN
    | `BUG_TRIAGE
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `BASIC_KANBAN
    | `AUTOMATED_KANBAN_V2
    | `AUTOMATED_REVIEWS_KANBAN
    | `BUG_TRIAGE
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "BASIC_KANBAN" => `BASIC_KANBAN
    | "AUTOMATED_KANBAN_V2" => `AUTOMATED_KANBAN_V2
    | "AUTOMATED_REVIEWS_KANBAN" => `AUTOMATED_REVIEWS_KANBAN
    | "BUG_TRIAGE" => `BUG_TRIAGE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `BASIC_KANBAN => "BASIC_KANBAN"
      | `AUTOMATED_KANBAN_V2 => "AUTOMATED_KANBAN_V2"
      | `AUTOMATED_REVIEWS_KANBAN => "AUTOMATED_REVIEWS_KANBAN"
      | `BUG_TRIAGE => "BUG_TRIAGE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TopicSuggestionDeclineReason: {
  type t = [
    | `NOT_RELEVANT
    | `TOO_SPECIFIC
    | `PERSONAL_PREFERENCE
    | `TOO_GENERAL
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `NOT_RELEVANT
    | `TOO_SPECIFIC
    | `PERSONAL_PREFERENCE
    | `TOO_GENERAL
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NOT_RELEVANT" => `NOT_RELEVANT
    | "TOO_SPECIFIC" => `TOO_SPECIFIC
    | "PERSONAL_PREFERENCE" => `PERSONAL_PREFERENCE
    | "TOO_GENERAL" => `TOO_GENERAL
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NOT_RELEVANT => "NOT_RELEVANT"
      | `TOO_SPECIFIC => "TOO_SPECIFIC"
      | `PERSONAL_PREFERENCE => "PERSONAL_PREFERENCE"
      | `TOO_GENERAL => "TOO_GENERAL"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PullRequestMergeMethod: {
  type t = [ | `MERGE | `SQUASH | `REBASE | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `MERGE | `SQUASH | `REBASE | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "MERGE" => `MERGE
    | "SQUASH" => `SQUASH
    | "REBASE" => `REBASE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `MERGE => "MERGE"
      | `SQUASH => "SQUASH"
      | `REBASE => "REBASE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_ActionExecutionCapabilitySetting: {
  type t = [
    | `DISABLED
    | `ALL_ACTIONS
    | `LOCAL_ACTIONS_ONLY
    | `NO_POLICY
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `DISABLED
    | `ALL_ACTIONS
    | `LOCAL_ACTIONS_ONLY
    | `NO_POLICY
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "DISABLED" => `DISABLED
    | "ALL_ACTIONS" => `ALL_ACTIONS
    | "LOCAL_ACTIONS_ONLY" => `LOCAL_ACTIONS_ONLY
    | "NO_POLICY" => `NO_POLICY
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `DISABLED => "DISABLED"
      | `ALL_ACTIONS => "ALL_ACTIONS"
      | `LOCAL_ACTIONS_ONLY => "LOCAL_ACTIONS_ONLY"
      | `NO_POLICY => "NO_POLICY"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PullRequestUpdateState: {
  type t = [ | `OPEN | `CLOSED | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `OPEN | `CLOSED | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "OPEN" => `OPEN
    | "CLOSED" => `CLOSED
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `OPEN => "OPEN"
      | `CLOSED => "CLOSED"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};
